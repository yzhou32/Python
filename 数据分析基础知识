1. 编写一个函数来验证两个字符串是否相同，不区分大小写
def match(s1,s2):
    s1 = s1.upper()
    s2 = s2.upper()
    if s1 == s2:
        return 'True'
    else:
        return 'False'
print(match("hello", "hELLo"))    # True
print(match("motive", "emotive")) # False
print(match("venom", "VENOM"))    # True
print(match("mask", "mAskinG"))   # False


2. 创建一个函数，该函数返回传入字符的ASCII值
def ctoa(char): 
    return ord(char)
print(ctoa("A")) # 65
print(ctoa("m")) # 109
print(ctoa("[")) # 91
print(ctoa("\\")) # 92


3. 创建一个函数如果第一个列表可以嵌套在第二个列表中，则返回True。
list1 can be nested inside list2 if:
1.list1's min is greater than list2's min.
2.list1's max is less than list2's max.

def can_nest(list1, list2):
    if min(list1) > min(list2) and max(list1) < max(list2):
        return 'True'
    else:
        return 'False'
print(can_nest([1, 2, 3, 4], [0, 6]))        # True
print(can_nest([3, 1], [4, 0]))             # True
print(can_nest([9, 9, 8], [8, 9]))         # False
print(can_nest([1, 2, 3, 4], [2, 3]))     # False


4. 创建一个函数，如果输入字符串仅包含大写或仅包含小写字母，则返回True
def same_case(txt):
    if txt.isupper() == True or txt.islower() == True:
        return 'True'
    else:
        return 'False'
print(same_case("hello"))    # True
print(same_case("HELLO"))    # True
print(same_case("Hello"))    # False
print(same_case("ketcHUp"))  # False

###
字符串.isalnum()  所有字符都是数字或者字母，为真返回 Ture，否则返回 False。
字符串.isalpha()   所有字符都是字母，为真返回 Ture，否则返回 False。
字符串.isdigit()     所有字符都是数字，为真返回 Ture，否则返回 False。
字符串.islower()    所有字符都是小写，为真返回 Ture，否则返回 False。
字符串.isupper()   所有字符都是大写，为真返回 Ture，否则返回 False。
字符串.istitle()      所有单词都是首字母大写，为真返回 Ture，否则返回 False。
字符串.isspace()   所有字符都是空白字符，为真返回 Ture，否则返回 False。


5. 创建一个函数，如果字符串包含空格，则该函数返回True。
def has_spaces(txt):
    if txt.find(' ') >= 0:
        return 'True'
    else:
        return 'False'
print(has_spaces("hello"))        # False
print(has_spaces("hello, world")) # True
print(has_spaces(" "))            # True
print(has_spaces(""))             # False
print(has_spaces(",./!@#"))       # False



